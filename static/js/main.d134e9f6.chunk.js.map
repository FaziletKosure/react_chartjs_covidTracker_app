{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Cards/Cards.jsx","images/image.jpg","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","map","positive","death","date","dateChecked","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","value","options","legend","display","title","text","lineChart","Date","toLocaleDateString","borderColor","fill","className","styles","container","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","Cards","console","log","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","variant","gutterBottom","start","end","duration","separator","toDateString","App","setData","setCountry","dataFetch","fetchedData","image","src","alt","CountryPicker","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d134e9f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1_HRk\",\"card\":\"Cards_card__3EjeX\",\"infected\":\"Cards_infected__1r7Wb\",\"recovered\":\"Cards_recovered__13jx7\",\"deaths\":\"Cards_deaths__1dx8f\"};","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n// export const fetchDailyData = async () => {\r\n//   try {\r\n//     const { data } = await axios.get(`${url}/daily`);\r\n\r\n//     return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n//   } catch (error) {\r\n//     return error;\r\n//   }\r\n// };\r\n\r\n// Instead of Global, it fetches the daily data for the US\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n      const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\r\n  \r\n      return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data:{ confirmed,recovered,deaths,lastUpdate},country}) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },  {\r\n            data: dailyData.map((data) => data.recovered),\r\n            label: 'Recovered',\r\n            borderColor: 'green',\r\n            backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n       {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">United States</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;","import React from 'react'\r\n\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\n\r\nimport styles from './Cards.module.css'\r\n\r\nconst Cards=({data:{ confirmed,recovered,deaths,lastUpdate}})=>{\r\n    console.log(confirmed);\r\n    if(!confirmed){\r\n       return \"Loading...\"\r\n\r\n    }\r\n  \r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3}className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' variant=\"h4\" gutterBottom >\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                            start={0}\r\n                            end={confirmed.value}\r\n                            duration={2.5}\r\n                            separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                        {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3}className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" variant=\"h4\"  gutterBottom>\r\n                           Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                        <CountUp\r\n                            start={0}\r\n                            end={recovered.value}\r\n                            duration={2.5}\r\n                            separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                        {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from of COVID-19</Typography>\r\n\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3}className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" variant=\"h4\"  gutterBottom>\r\n                           Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                        <CountUp\r\n                            start={0}\r\n                            end={deaths.value}\r\n                            duration={2.5}\r\n                            separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                        {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n            </Grid>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Cards","export default __webpack_public_path__ + \"static/media/image.58792806.jpg\";","import React,{useEffect,useState} from 'react'\r\n\r\nimport {Cards,Chart,CountryPicker} from './components'\r\nimport {fetchData} from './api'\r\nimport styles from './App.module.css'\r\nimport image from './images/image.jpg';\r\n\r\nconst App=()=>{\r\n    const [data, setData] = useState({});\r\n    const [country, setCountry] = useState('');\r\n   \r\n    useEffect(()=>{\r\n        async function fetchedData() {\r\n          const dataFetch = await fetchData()\r\n          console.log(dataFetch);\r\n          setData(dataFetch)  \r\n        }\r\n        fetchedData();\r\n    },[])\r\n    const handleCountryChange = async (country) => {\r\n        const data = await fetchData(country);\r\n    \r\n        setCountry(country)\r\n        setData(data)\r\n      }\r\n    return(\r\n        <div className={styles.container}> \r\n             <img className={styles.image} src={image} alt=\"COVID-19\" />\r\n             <Cards data={data}/>\r\n            <CountryPicker   handleCountryChange={handleCountryChange}/>\r\n            <Chart  data={data} country={country}/>\r\n                   \r\n        </div> \r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__g0iBe\",\"image\":\"App_image__3Gbod\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3mdYV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3I--t\"};"],"sourceRoot":""}